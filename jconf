#!/usr/bin/env python3
import os
import sys
import shutil
import yaml

class Jconf:
    def __init__(self):
        self._homedir = os.path.normpath(os.getenv("HOME"))
        try:
            fstrm = open("db.yaml")
            idata = list(yaml.load_all(fstrm))
            fstrm.close()

            self._data = list()
            for (i,d) in enumerate(idata):
                if 'name' not in d:
                    print("Required key 'name' not in record #%u" % (i+1))
                elif 'home' not in d and 'dir' not in d:
                    print("Record %s requires either a 'home' or 'dir' field" %
                            d['name'])
                else:
                    subdir = os.path.join(self._homedir, "." + d['name'])
                    if 'dir' in d and not os.path.exists(subdir):
                        os.mkdir(subdir)
                    self._data.append(d)

            if len(self._data) != len(idata):
                print("Corrupt records in database!")
        except FileNotFoundError:
            print("db.yaml file not found!")

    def go(self, fileop):
        for c in self._data:
            n = c['name']
            print("Processing %s" % n)
            home_strs = list()
            repo_strs = list()
            for f in c.get('home', []):
                print('\t' + "." + f)
                home_strs.append(os.path.join(self._homedir, "." + f))
                repo_strs.append(os.path.join(n,f))
            for f in c.get('dir', []):
                print('\t' + os.path.join(n,f))
                home_strs.append(os.path.join(self._homedir,"." + n,f))
                repo_strs.append(os.path.join(n,f))

            ops = map(fileop, zip(home_strs, repo_strs))
            for (src,dest) in ops:
                shutil.copy(src, dest)

def pull(fs):
    return fs[0],fs[1]
def push(fs):
    return fs[1],fs[0]

def parse_args(args):
    if len(args) != 2:
        return None
    elif args[1] == "pull":
        return pull
    elif args[1] == "push":
        return push
    else:
        return None
def print_usage():
    print("""
    Usage: jconf {pull | push}
    """)

def main():
    op = parse_args(sys.argv)
    if op == None:
        print_usage()
        return
    conf = Jconf()
    conf.go(op)

if __name__ == "__main__":
    main()
