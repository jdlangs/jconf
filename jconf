#!/usr/bin/env python3
import os
import sys
import filecmp
import shutil
import yaml

class Jconf:
    def __init__(self, args):
        self._validverbs = ["pull", "push"]
        self._homedir = os.path.normpath(os.getenv("HOME"))
        self._verb = ""
        self._sim = False
        self._verbose = False
        self._files = list()
        self.data = list()

        try:
            self.parse_args(args)
        except RuntimeError:
            self.print_usage()
            return

        try:
            fstrm = open("db.yaml")
            idata = list(yaml.safe_load_all(fstrm))
            fstrm.close()
            self.data = self.check_database(idata, self._files)

        except FileNotFoundError:
            print("db.yaml file not found!")
        except RuntimeError as ex:
            print("Database error: ")
            print(ex)

    def parse_args(self, args):
        if len(args) < 2 or (not args[1] in self._validverbs):
            raise RuntimeError()
        self._verb = args[1]
        for arg in args[2:]:
            if arg == "-n":
                self._sim = True
            elif arg == "-v":
                self._verbose = True
            else:
                self._files.append(arg)

    def print_usage(self):
        verbstr = " | ".join(self._validverbs)
        print("Usage: jconf {%s} [-n] [-v] [record1] [record2]..." % verbstr)

    def check_database(self, data, files):
        allowed_fields = ["home", "config", "dir", "dir-nohide"]
        ndata = list()
        for (i,record) in enumerate(data):
            if 'name' not in record:
                raise RuntimeError("Required key 'name' not in record #%u" % (i+1))
            elif not any([f in record for f in allowed_fields]):
                raise RuntimeError(("Record '%s' - No field found from " + str(allowed_fields)) %
                        record['name'])

            if len(files) == 0 or record["name"] in files:
                #TODO: create subdirs in repo folder automatically if missing
                subdir = os.path.join(self._homedir, "." + record["name"])
                if "dir" in record and not os.path.exists(subdir):
                    if self._sim or self._verbose:
                        print("Creating subdir in HOME: " + subdir)
                    if not self._sim:
                        os.mkdir(subdir)
                subdir_nohide = os.path.join(self._homedir, record["name"])
                if "dir-nohide" in record and not os.path.exists(subdir_nohide):
                    if self._sim or self._verbose:
                        print("Creating subdir in HOME: " + subdir_nohide)
                    if not self._sim:
                        os.mkdir(subdir_nohide)
                cfgdir = os.path.join(self._homedir, ".config", record["name"])
                if "config" in record and not os.path.exists(cfgdir):
                    if self._sim or self._verbose:
                        print("Creating subdir in .config: " + subdir)
                    if not self._sim:
                        os.mkdir(cfgdir)
                ndata.append(record)
        return ndata

    def go(self):
        if self._sim:
            print("SIMULATION")
        for c in self.data:
            record_name = c['name']
            if self._verbose:
                print("Record '%s': " % record_name)
            for f in c.get("home", []):
                self.fileop(self._verb,
                    os.path.join(self._homedir, "." + f),
                    os.path.join(record_name,f)
                )
            for f in c.get('config', []):
                self.fileop(self._verb,
                    os.path.join(self._homedir, ".config", record_name, f),
                    os.path.join(record_name,f)
                )
            for f in c.get('dir', []):
                self.fileop(self._verb,
                    os.path.join(self._homedir, "." + record_name, f),
                    os.path.join(record_name,f)
                )
            for f in c.get('dir-nohide', []):
                self.fileop(self._verb,
                    os.path.join(self._homedir, record_name, f),
                    os.path.join(record_name,f)
                )

    def fileop(self, verb, home, repo):
        doprint = self._sim or self._verbose
        if verb == 'pull':
            if doprint:
                print("\tpulling %s -> %s" % (home, repo))
            if not self._sim:
                try:
                    shutil.copy(home, repo)
                except Exception as e:
                    print(f'Failed to pull {home} -> {repo}')
        elif verb == 'push':
            if doprint:
                print("\tpushing %s -> %s" % (repo, home))
            if not self._sim:
                try:
                    shutil.copy(repo, home)
                except Exception as e:
                    print(f'Failed to push {repo} -> {home}')

def main():
    conf = Jconf(sys.argv)
    conf.go()

if __name__ == "__main__":
    main()
